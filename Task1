import java.util.ArrayList;
import java.util.Collections;
import java.util.EnumSet;
import java.util.List;

// Enum for card suits
enum Suit {
    SPADE, CLUB, HEART, DIAMOND
}

// Enum for card ranks
enum Rank {
    ACE, TWO, THREE, FOUR, FIVE, SIX, SEVEN, EIGHT, NINE, TEN, JACK, QUEEN, KING
}

// Class representing a card
class Card {
    private Suit suit;
    private Rank rank;

    // Constructor
    public Card(Suit suit, Rank rank) {
        this.suit = suit;
        this.rank = rank;
    }

    // Getter methods
    public Suit getSuit() {
        return suit;
    }

    public Rank getRank() {
        return rank;
    }

    // Method to get the color of the card
    public String getColor() {
        if (suit == Suit.HEART || suit == Suit.DIAMOND) {
            return "Red";
        } else {
            return "Black";
        }
    }

    @Override
    public String toString() {
        return rank + " of " + suit;
    }
}

// Comparator class for custom sorting
class CardComparator implements java.util.Comparator<Card> {
    @Override
    public int compare(Card card1, Card card2) {
        // Compare by color
        int colorCompare = card1.getColor().compareTo(card2.getColor());
        if (colorCompare != 0) {
            return colorCompare;
        }

        // Compare by suit within each color
        int suitCompare = card1.getSuit().compareTo(card2.getSuit());
        if (suitCompare != 0) {
            return suitCompare;
        }

        // Compare by rank
        return card1.getRank().compareTo(card2.getRank());
    }
}

// Class representing a deck of cards
class Deck {
    private List<Card> cards;

    // Constructor
    public Deck() {
        cards = new ArrayList<>();
        // Initialize deck with 52 cards
        for (Suit suit : EnumSet.allOf(Suit.class)) {
            for (Rank rank : EnumSet.allOf(Rank.class)) {
                cards.add(new Card(suit, rank));
            }
        }
    }

    // Method to draw a random card
    public Card drawRandomCard() {
        int randomIndex = (int) (Math.random() * cards.size());
        return cards.remove(randomIndex);
    }

    // Method to draw n random cards
    public List<Card> drawRandomCards(int n) {
        List<Card> drawnCards = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            drawnCards.add(drawRandomCard());
        }
        return drawnCards;
    }

    // Method to shuffle the deck
    public void shuffle() {
        Collections.shuffle(cards);
    }
}

public class Main {
    public static void main(String[] args) {
        Deck deck = new Deck();
        deck.shuffle();

        // Draw 20 random cards
        List<Card> drawnCards = deck.drawRandomCards(20);

        // Sort the drawn cards using custom comparator
        Collections.sort(drawnCards, new CardComparator());

        // Display the sorted cards
        System.out.println("Sorted Drawn Cards:");
        for (Card card : drawnCards) {
            System.out.println(card);
        }
    }
}
